import { expect } from 'chai';

import { commitDiffPairs } from './repo-cloc-diff.functions';
import { CommitCompact } from './commit.model';

// #copilot - good part of the boilerplate of the test has been generated by copilot
describe('commitDiffPairs', () => {
    it('should return an object with pairs of most recent and least recent commits for each month', () => {
        const commitsByMonth: { [yearMonth: string]: CommitCompact[] } = {
            '2021-03': [
                { sha: 'def', date: new Date('2021-03-01'), author: 'author1' },
            ],
            '2021-02': [
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3' },
                { sha: '789', date: new Date('2021-02-01'), author: 'author1' },
            ],
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1' },
            ],
        };
        const expectedPairs: { [yearMonth: string]: [CommitCompact, CommitCompact] | null } = {
            '2021-03': [{ sha: 'def', date: new Date('2021-03-01'), author: 'author1' }, { sha: 'abc', date: new Date('2021-02-15'), author: 'author3' }],
            '2021-02': [{ sha: 'abc', date: new Date('2021-02-15'), author: 'author3' }, { sha: '456', date: new Date('2021-01-15'), author: 'author2' }],
            '2021-01': [{ sha: '456', date: new Date('2021-01-15'), author: 'author2' }, { sha: '123', date: new Date('2021-01-01'), author: 'author1' }],
        };
        const pairs = commitDiffPairs(commitsByMonth);
        expect(pairs).deep.equal(expectedPairs);
    });

    it('should return an object with null pairs for months with no commits', () => {
        const commitsByMonth: { [yearMonth: string]: CommitCompact[] } = {
            '2021-03': [
                { sha: 'def', date: new Date('2021-03-01'), author: 'author1' },
            ],
            '2021-02': [],
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1' },
            ],
        };
        const expectedPairs: { [yearMonth: string]: [CommitCompact, CommitCompact] | null } = {
            '2021-03': [{ sha: 'def', date: new Date('2021-03-01'), author: 'author1' }, { sha: '456', date: new Date('2021-01-15'), author: 'author2' }],
            '2021-02': null,
            '2021-01': [{ sha: '456', date: new Date('2021-01-15'), author: 'author2' }, { sha: '123', date: new Date('2021-01-01'), author: 'author1' }],
        };
        const pairs = commitDiffPairs(commitsByMonth);
        expect(pairs).deep.equal(expectedPairs);
    });

    it('should return an object with null pairs for the first month with only one commit', () => {
        const commitsByMonth: { [yearMonth: string]: CommitCompact[] } = {
            '2021-03': [
                { sha: 'def', date: new Date('2021-03-01'), author: 'author1' },
            ],
            '2021-02': [
                { sha: '456', date: new Date('2021-02-01'), author: 'author2' },
            ],
            '2021-01': [
                { sha: '123', date: new Date('2021-01-01'), author: 'author1' },
            ],
        };
        const expectedPairs: { [yearMonth: string]: [CommitCompact, CommitCompact] | null } = {
            '2021-03': [{ sha: 'def', date: new Date('2021-03-01'), author: 'author1' }, { sha: '456', date: new Date('2021-02-01'), author: 'author2' }],
            '2021-02': [{ sha: '456', date: new Date('2021-02-01'), author: 'author2' }, { sha: '123', date: new Date('2021-01-01'), author: 'author1' }],
            '2021-01': null,
        };
        const pairs = commitDiffPairs(commitsByMonth);
        expect(pairs).deep.equal(expectedPairs);
    });

    it('works even if the order of the commits is not from the most recent to the least recent', () => {
        const commitsByMonth: { [yearMonth: string]: CommitCompact[] } = {
            '2021-03': [
                { sha: 'def', date: new Date('2021-03-01'), author: 'author1' },
            ],
            '2021-02': [
                // in this case, the order of the commits is not from the least recent to the most recent
                { sha: '789', date: new Date('2021-02-01'), author: 'author1' },
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3' },
            ],
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1' },
            ],
        };
        const expectedPairs: { [yearMonth: string]: [CommitCompact, CommitCompact] | null } = {
            '2021-03': [{ sha: 'def', date: new Date('2021-03-01'), author: 'author1' }, { sha: 'abc', date: new Date('2021-02-15'), author: 'author3' }],
            '2021-02': [{ sha: 'abc', date: new Date('2021-02-15'), author: 'author3' }, { sha: '456', date: new Date('2021-01-15'), author: 'author2' }],
            '2021-01': [{ sha: '456', date: new Date('2021-01-15'), author: 'author2' }, { sha: '123', date: new Date('2021-01-01'), author: 'author1' }],
        };
        const pairs = commitDiffPairs(commitsByMonth);
        expect(pairs).deep.equal(expectedPairs);
    });

    it('works even if the order of the keys of the dictionary is not from the most recent to the least recent', () => {
        const commitsByMonth: { [yearMonth: string]: CommitCompact[] } = {
            // in this case, the olderst month is inserted first
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1' },
            ],
            '2021-03': [
                { sha: 'def', date: new Date('2021-03-01'), author: 'author1' },
            ],
            '2021-02': [
                // in this case, the order of the commits is not from the least recent to the most recent
                { sha: '789', date: new Date('2021-02-01'), author: 'author1' },
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3' },
            ],
        };
        const expectedPairs: { [yearMonth: string]: [CommitCompact, CommitCompact] | null } = {
            '2021-03': [{ sha: 'def', date: new Date('2021-03-01'), author: 'author1' }, { sha: 'abc', date: new Date('2021-02-15'), author: 'author3' }],
            '2021-02': [{ sha: 'abc', date: new Date('2021-02-15'), author: 'author3' }, { sha: '456', date: new Date('2021-01-15'), author: 'author2' }],
            '2021-01': [{ sha: '456', date: new Date('2021-01-15'), author: 'author2' }, { sha: '123', date: new Date('2021-01-01'), author: 'author1' }],
        };
        const pairs = commitDiffPairs(commitsByMonth);
        expect(pairs).deep.equal(expectedPairs);
    });
});