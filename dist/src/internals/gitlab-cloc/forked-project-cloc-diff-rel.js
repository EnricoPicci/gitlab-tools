"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeCompareForksInGroupWithUpstreamExplanationToCsv$ = exports.writeCompareForksInGroupWithUpstreamExplanationToJson$ = exports.compareForksInGroupWithUpstreamExplanation$ = exports.writeCompareForksInGroupWithUpstreamAllDiffs$ = exports.compareForksInGroupWithUpstreamAllDiffs$ = exports.writeCompareForksInGroupWithUpstreamClocGitDiffRelByFile$ = exports.compareForksInGroupWithUpstreamClocGitDiffRelByFile$ = void 0;
const path_1 = __importDefault(require("path"));
const rxjs_1 = require("rxjs");
const observable_fs_1 = require("observable-fs");
const csv_tools_1 = require("@enrico.piccinin/csv-tools");
const compare_forks_1 = require("../gitlab/compare-forks");
const group_1 = require("../gitlab/group");
const cloc_git_diff_rel_between_tag_branch_commit_1 = require("../cloc-git/cloc-git-diff-rel-between-tag-branch-commit");
const explain_diffs_1 = require("../git/explain-diffs");
//********************************************************************************************************************** */
//****************************   APIs                               **************************************************** */
//********************************************************************************************************************** */
/*
These functions extend the functions that compare forks with upstream or with the first commit after the fork was created
that are defined in the file src/internals/gitlab/compare-forks.ts.
These functions start from the comparison results provided by the functions in compare-forks.ts and enrich them with:
- cloc git diff information (info returned by the command cloc --git-diff-rel --by-file)
- git diff information (info returned by the command git diff)

Moreover, leveraging the LLM, they provide explanations for the diffs generated by the LLM.
*/
//======================================================================================================================
// COMPARE WITH UPSTREAM WITH cloc --git-diff-rel --by-file INFORMATION
function compareForksInGroupWithUpstreamClocGitDiffRelByFile$(gitLabUrl, token, groupId, groupName, projectsWithNoChanges, repoRootFolder, executedCommands, languages) {
    return (0, compare_forks_1.compareForksWithUpstreamInGroup$)(gitLabUrl, token, groupId, groupName).pipe((0, rxjs_1.filter)(comparisonResult => {
        if (comparisonResult.diffs.length === 0) {
            projectsWithNoChanges.push(comparisonResult.project_name);
            console.log(`Project ${comparisonResult.project_name} has no changes`);
            return false;
        }
        return true;
    }), 
    // we MUST use concatMap here to ensure that clocDiffRelForProject$ is not streaming concurrently but only sequentially
    // in other words clocDiffRelForProject$ must return one value for one comparisonResult before starting for the next one
    // this ensures that the command cloc --git-diff-rel --by-file is not executed concurrently for different projects
    // Since clocDiffRelForProject$ triggers the command "cloc --git-diff-rel --by-file" which itself 
    // outputs on the stdout, we must ensure that the output of the command is not mixed up  
    (0, rxjs_1.concatMap)(comparisonResult => {
        const projectDir = projectDirFromProjectName(comparisonResult.project_name, repoRootFolder);
        const _comparisonResult = Object.assign(Object.assign({}, comparisonResult), { projectDir });
        return (0, cloc_git_diff_rel_between_tag_branch_commit_1.clocDiffRelForProject$)(_comparisonResult, repoRootFolder, executedCommands, languages);
    }));
}
exports.compareForksInGroupWithUpstreamClocGitDiffRelByFile$ = compareForksInGroupWithUpstreamClocGitDiffRelByFile$;
function writeCompareForksInGroupWithUpstreamClocGitDiffRelByFile$(gitLabUrl, token, groupId, repoRootFolder, outdir, languages) {
    const projectsWithNoChanges = [];
    let groupName;
    const timeStampYYYYMMDDHHMMSS = new Date().toISOString().replace(/:/g, '-').split('.')[0];
    const executedCommands = [];
    return (0, group_1.readGroup$)(gitLabUrl, token, groupId).pipe((0, rxjs_1.concatMap)(group => {
        groupName = group.name;
        return compareForksInGroupWithUpstreamClocGitDiffRelByFile$(gitLabUrl, token, groupId, groupName, projectsWithNoChanges, repoRootFolder, executedCommands, languages);
    }), (0, csv_tools_1.toCsvObs)(), (0, rxjs_1.toArray)(), (0, rxjs_1.concatMap)((compareResult) => {
        const outFile = path_1.default.join(outdir, `${groupName}-compare-with-upstream-cloc-diff-rel-${timeStampYYYYMMDDHHMMSS}.csv`);
        return writeCompareResultsToCsv$(compareResult, groupName, outFile);
    }), (0, rxjs_1.concatMap)(() => {
        const outFile = path_1.default.join(outdir, `${groupName}-projects-with-no-changes-${timeStampYYYYMMDDHHMMSS}.txt`);
        return writeProjectsWithNoChanges$(projectsWithNoChanges, groupName, outFile);
    }), (0, rxjs_1.concatMap)(() => {
        const outFile = path_1.default.join(outdir, `${groupName}-executed-commands-${timeStampYYYYMMDDHHMMSS}.txt`);
        return writeExecutedCommands$(executedCommands, groupName, outFile);
    }));
}
exports.writeCompareForksInGroupWithUpstreamClocGitDiffRelByFile$ = writeCompareForksInGroupWithUpstreamClocGitDiffRelByFile$;
//======================================================================================================================
// COMPARE WITH UPSTREAM WITH cloc --git-diff-rel --by-file AND ENRICH WITH GIT DIFF INFORMATION ANS FILE CONTENT
function compareForksInGroupWithUpstreamAllDiffs$(gitLabUrl, token, groupId, groupName, projectsWithNoChanges, repoRootFolder, executedCommands, languages, concurrentClocGitDiff = 5) {
    return (0, compare_forks_1.compareForksWithUpstreamInGroup$)(gitLabUrl, token, groupId, groupName).pipe((0, rxjs_1.filter)(comparisonResult => {
        if (comparisonResult.diffs.length === 0) {
            projectsWithNoChanges.push(comparisonResult.project_name);
            console.log(`Project ${comparisonResult.project_name} has no changes`);
            return false;
        }
        return true;
    }), (0, rxjs_1.mergeMap)(comparisonResult => {
        const projectDir = projectDirFromProjectName(comparisonResult.project_name, repoRootFolder);
        const _comparisonResult = Object.assign(Object.assign({}, comparisonResult), { projectDir });
        return (0, cloc_git_diff_rel_between_tag_branch_commit_1.allDiffsForProject$)(_comparisonResult, repoRootFolder, executedCommands, languages);
    }, concurrentClocGitDiff));
}
exports.compareForksInGroupWithUpstreamAllDiffs$ = compareForksInGroupWithUpstreamAllDiffs$;
function writeCompareForksInGroupWithUpstreamAllDiffs$(gitLabUrl, token, groupId, repoRootFolder, outdir, languages) {
    const projectsWithNoChanges = [];
    let groupName;
    const timeStampYYYYMMDDHHMMSS = new Date().toISOString().replace(/:/g, '-').split('.')[0];
    const executedCommands = [];
    return (0, group_1.readGroup$)(gitLabUrl, token, groupId).pipe((0, rxjs_1.concatMap)(group => {
        groupName = group.name;
        return compareForksInGroupWithUpstreamAllDiffs$(gitLabUrl, token, groupId, groupName, projectsWithNoChanges, repoRootFolder, executedCommands, languages);
    }), (0, rxjs_1.toArray)(), (0, rxjs_1.concatMap)((compareResult) => {
        const outFile = path_1.default.join(outdir, `${groupName}-compare-with-upstream-all-diffs-${timeStampYYYYMMDDHHMMSS}.json`);
        return writeCompareResultsToJson$(compareResult, groupName, outFile);
    }), (0, rxjs_1.concatMap)(() => {
        const outFile = path_1.default.join(outdir, `${groupName}-projects-with-no-changes-${timeStampYYYYMMDDHHMMSS}.txt`);
        return writeProjectsWithNoChanges$(projectsWithNoChanges, groupName, outFile);
    }), (0, rxjs_1.concatMap)(() => {
        const outFile = path_1.default.join(outdir, `${groupName}-executed-commands-${timeStampYYYYMMDDHHMMSS}.txt`);
        return writeExecutedCommands$(executedCommands, groupName, outFile);
    }));
}
exports.writeCompareForksInGroupWithUpstreamAllDiffs$ = writeCompareForksInGroupWithUpstreamAllDiffs$;
function compareForksInGroupWithUpstreamExplanation$(gitLabUrl, token, groupId, groupName, promptTemplates, repoRootFolder, projectsWithNoChanges, executedCommands, languages, concurrentLLMCalls = 5) {
    return compareForksInGroupWithUpstreamAllDiffs$(gitLabUrl, token, groupId, groupName, projectsWithNoChanges, repoRootFolder, executedCommands, languages).pipe((0, rxjs_1.mergeMap)(comparisonResult => {
        return (0, explain_diffs_1.explainGitDiffs$)(comparisonResult, promptTemplates, executedCommands);
    }, concurrentLLMCalls));
}
exports.compareForksInGroupWithUpstreamExplanation$ = compareForksInGroupWithUpstreamExplanation$;
function writeCompareForksInGroupWithUpstreamExplanationToJson$(gitLabUrl, token, groupId, promptTemplates, repoRootFolder, outdir, languages) {
    const projectsWithNoChanges = [];
    let groupName;
    const timeStampYYYYMMDDHHMMSS = new Date().toISOString().replace(/:/g, '-').split('.')[0];
    const executedCommands = [];
    return (0, group_1.readGroup$)(gitLabUrl, token, groupId).pipe((0, rxjs_1.concatMap)(group => {
        groupName = group.name;
        return compareForksInGroupWithUpstreamExplanation$(gitLabUrl, token, groupId, groupName, promptTemplates, repoRootFolder, projectsWithNoChanges, executedCommands, languages);
    }), (0, rxjs_1.toArray)(), (0, rxjs_1.concatMap)((compareResult) => {
        const outFile = path_1.default.join(outdir, `${groupName}-compare-with-upstream-explanations-${timeStampYYYYMMDDHHMMSS}.json`);
        return writeCompareResultsToJson$(compareResult, groupName, outFile);
    }), (0, rxjs_1.concatMap)(() => {
        const outFile = path_1.default.join(outdir, `${groupName}-projects-with-no-changes-${timeStampYYYYMMDDHHMMSS}.txt`);
        return writeProjectsWithNoChanges$(projectsWithNoChanges, groupName, outFile);
    }), (0, rxjs_1.concatMap)(() => {
        const outFile = path_1.default.join(outdir, `${groupName}-executed-commands-${timeStampYYYYMMDDHHMMSS}.txt`);
        return writeExecutedCommands$(executedCommands, groupName, outFile);
    }));
}
exports.writeCompareForksInGroupWithUpstreamExplanationToJson$ = writeCompareForksInGroupWithUpstreamExplanationToJson$;
function writeCompareForksInGroupWithUpstreamExplanationToCsv$(gitLabUrl, token, groupId, promptTemplates, repoRootFolder, outdir, languages) {
    const projectsWithNoChanges = [];
    let groupName;
    const timeStampYYYYMMDDHHMMSS = new Date().toISOString().replace(/:/g, '-').split('.')[0];
    const executedCommands = [];
    return (0, group_1.readGroup$)(gitLabUrl, token, groupId).pipe((0, rxjs_1.concatMap)(group => {
        groupName = group.name;
        return compareForksInGroupWithUpstreamExplanation$(gitLabUrl, token, groupId, groupName, promptTemplates, repoRootFolder, projectsWithNoChanges, executedCommands, languages);
    }), 
    // replace any ',' in the explanation with a '-'
    (0, rxjs_1.map)((diffWithExplanation) => {
        diffWithExplanation.explanation = diffWithExplanation.explanation.replace(/,/g, '-');
        diffWithExplanation.explanation = diffWithExplanation.explanation.replace(/;/g, ' ');
        return diffWithExplanation;
    }), (0, csv_tools_1.toCsvObs)(), (0, rxjs_1.toArray)(), (0, rxjs_1.concatMap)((compareResult) => {
        const outFile = path_1.default.join(outdir, `${groupName}-compare-with-upstream-explanations-${timeStampYYYYMMDDHHMMSS}.csv`);
        return writeCompareResultsToCsv$(compareResult, groupName, outFile);
    }), (0, rxjs_1.concatMap)(() => {
        const outFile = path_1.default.join(outdir, `${groupName}-projects-with-no-changes-${timeStampYYYYMMDDHHMMSS}.txt`);
        return writeProjectsWithNoChanges$(projectsWithNoChanges, groupName, outFile);
    }), (0, rxjs_1.concatMap)(() => {
        const outFile = path_1.default.join(outdir, `${groupName}-executed-commands-${timeStampYYYYMMDDHHMMSS}.txt`);
        return writeExecutedCommands$(executedCommands, groupName, outFile);
    }));
}
exports.writeCompareForksInGroupWithUpstreamExplanationToCsv$ = writeCompareForksInGroupWithUpstreamExplanationToCsv$;
//********************************************************************************************************************** */
//****************************               Internals              **************************************************** */
//********************************************************************************************************************** */
// these functions may be exported for testing purposes
const writeCompareResultsToCsv$ = (compareResults, group, outFile) => {
    return (0, observable_fs_1.writeFileObs)(outFile, compareResults)
        .pipe((0, rxjs_1.tap)({
        next: () => console.log(`====>>>> Fork compare result for Group ${group} written in csv file: ${outFile}`),
    }));
};
const writeCompareResultsToJson$ = (compareResults, group, outFile) => {
    // dump compareResults as a json string
    const jsonArray = JSON.stringify(compareResults, null, 2);
    return (0, observable_fs_1.writeFileObs)(outFile, [jsonArray])
        .pipe((0, rxjs_1.tap)({
        next: () => console.log(`====>>>> Fork compare result for Group ${group} written in json file: ${outFile}`),
    }));
};
const writeProjectsWithNoChanges$ = (projectsWithNoChanges, group, outFile) => {
    return (0, observable_fs_1.writeFileObs)(outFile, projectsWithNoChanges)
        .pipe((0, rxjs_1.tap)({
        next: () => console.log(`====>>>> Forks with no commits for Group ${group} written in csv file: ${outFile}`),
    }));
};
const writeExecutedCommands$ = (executedCommands, group, outFile) => {
    return (0, observable_fs_1.writeFileObs)(outFile, executedCommands)
        .pipe((0, rxjs_1.tap)({
        next: () => console.log(`====>>>> Command executed to calculate fork diffs for group "${group}" written in csv file: ${outFile}`),
    }));
};
function projectDirFromProjectName(project_name, repoRootFolder) {
    // the project_name_with_namespace is in the format group / subgroup / project
    // we want to turn this into a directory split by '/' and then join the various parts with the projectDir
    const projectDirParts = project_name.split('/');
    let projectDir = '';
    for (let i = 0; i < projectDirParts.length; i++) {
        projectDir = path_1.default.join(projectDir, projectDirParts[i].trim());
    }
    projectDir = path_1.default.join(repoRootFolder, projectDir);
    return projectDir;
}
//# sourceMappingURL=forked-project-cloc-diff-rel.js.map