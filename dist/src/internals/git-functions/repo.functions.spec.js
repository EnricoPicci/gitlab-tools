"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const repo_functions_1 = require("./repo.functions");
// #copilot - good part of the boilerplate of this tests has been generated by copilot
describe('groupRepoCommitsByMonth', () => {
    it('should group commits by month and year for multiple repos', () => {
        const repos = [
            {
                path: 'user/repo1',
                commits: [],
                commitsByMonth: {
                    '01-2021': {
                        commits: [
                            { sha: '123', author: 'author1', date: new Date('2021-01-01') },
                            { sha: '456', author: 'author2', date: new Date('2021-01-15') },
                        ],
                        authors: new Set(['author1', 'author2']),
                    },
                    '02-2021': {
                        commits: [
                            { sha: '789', author: 'author3', date: new Date('2021-02-01') },
                            { sha: 'abc', author: 'author1', date: new Date('2021-02-15') },
                        ],
                        authors: new Set(['author1', 'author3']),
                    },
                },
            },
            {
                path: 'user/repo2',
                commits: [],
                commitsByMonth: {
                    '01-2021': {
                        commits: [
                            { sha: 'def', author: 'author5', date: new Date('2021-01-01') },
                            { sha: 'ghi', author: 'author4', date: new Date('2021-01-15') },
                        ],
                        authors: new Set(['author4', 'author5']),
                    },
                    '02-2021': {
                        commits: [
                            { sha: 'jkl', author: 'author4', date: new Date('2021-02-01') },
                            { sha: 'mno', author: 'author6', date: new Date('2021-02-15') },
                        ],
                        authors: new Set(['author4', 'author6']),
                    },
                },
            },
        ];
        const expected = {
            '01-2021': [
                {
                    repoPath: 'user/repo1',
                    commits: [
                        { sha: '123', author: 'author1', date: new Date('2021-01-01') },
                        { sha: '456', author: 'author2', date: new Date('2021-01-15') },
                    ],
                    authors: ['author1', 'author2'],
                },
                {
                    repoPath: 'user/repo2',
                    commits: [
                        { sha: 'def', author: 'author5', date: new Date('2021-01-01') },
                        { sha: 'ghi', author: 'author4', date: new Date('2021-01-15') },
                    ],
                    authors: ['author4', 'author5'],
                },
            ],
            '02-2021': [
                {
                    repoPath: 'user/repo1',
                    commits: [
                        { sha: '789', author: 'author3', date: new Date('2021-02-01') },
                        { sha: 'abc', author: 'author1', date: new Date('2021-02-15') },
                    ],
                    authors: ['author1', 'author3'],
                },
                {
                    repoPath: 'user/repo2',
                    commits: [
                        { sha: 'jkl', author: 'author4', date: new Date('2021-02-01') },
                        { sha: 'mno', author: 'author6', date: new Date('2021-02-15') },
                    ],
                    authors: ['author4', 'author6'],
                },
            ],
        };
        (0, chai_1.expect)((0, repo_functions_1.groupRepoCommitsByMonth)(repos)).deep.equal(expected);
    });
    it('should return an empty object for an empty array', () => {
        const repos = [];
        const expected = {};
        (0, chai_1.expect)((0, repo_functions_1.groupRepoCommitsByMonth)(repos)).deep.equal(expected);
    });
});
//# sourceMappingURL=repo.functions.spec.js.map